name: Update Submodules

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: '0 0/3 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository and submodules
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      # Update submodules
      - name: Update submodules
        id: submodules
        run: |
          CHANGED=0
          git submodule foreach --quiet '
            echo "Updating $name..."
            git fetch origin
            git merge --ff-only origin/$(git rev-parse --abbrev-ref HEAD) || true
            if ! git diff --quiet; then
              git add .
              CHANGED=1
            fi
          '
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      # Create PR if changes detected
      - name: Create Pull Request
        if: steps.submodules.outputs.changed == '1'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: auto/submodule-update-main
          base: main
          title: Automated submodule update (main)
          body: This PR updates all submodules automatically.
          commit-message: Automated update of all submodules (main)
          labels: automation
          draft: false

      # Auto-merge PR if created
      - name: Auto-merge PR
        if: steps.submodules.outputs.changed == '1'
        run: |
          gh pr merge auto/submodule-update-main --squash --auto --delete-branch || echo "No PR to merge"

      # Cleanup old branches if PR already merged
      - name: Cleanup old branches
        run: |
          for BRANCH in auto/submodule-update-main auto/submodule-update-dev; do
            if gh pr view $BRANCH --json mergedAt -q '.mergedAt' | grep -qv null; then
              git push origin --delete $BRANCH || echo "Branch $BRANCH not found, skipping"
            fi
          done
